import pygame
import random
import math

# Initialize Pygame and mixer for sound
pygame.init()
pygame.mixer.init()

# Screen dimensions
SCREEN_WIDTH = 800
SCREEN_HEIGHT = 600

# Create the screen
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

# Colors
PURPLE = (128, 0, 128)
WHITE = (255, 255, 255)

# Title and Icon
pygame.display.set_caption("Space Invaders")
icon = pygame.image.load('assets/spaceship.png')
pygame.display.set_icon(icon)

# Load sound effects
laser_sound = pygame.mixer.Sound('assets/laser.wav')
explosion_sound = pygame.mixer.Sound('assets/explosion.wav')
game_over_sound = pygame.mixer.Sound('assets/game_over.wav')

# Player
player_img = pygame.image.load('assets/player.png')
player_img = pygame.transform.rotate(player_img, 90)  # Rotate the player image to face upwards
player_x = 370
player_y = 480
player_x_change = 0

# Enemy
enemy_img = []
enemy_x = []
enemy_y = []
enemy_x_change = []
enemy_y_change = []
num_of_enemies = 6

for i in range(num_of_enemies):
    enemy_img.append(pygame.image.load('assets/player.png'))  # Temporarily using player image as enemy
    enemy_x.append(random.randint(0, 736))
    enemy_y.append(random.randint(50, 150))
    enemy_x_change.append(4)
    enemy_y_change.append(40)

# Bullet
bullet_img = pygame.image.load('assets/bullet.png')
bullet_x = 0
bullet_y = 480
bullet_y_change = 10
bullet_state = "ready"  # 'ready' means the bullet is not on the screen

# Score
score_value = 0
font = pygame.font.Font('freesansbold.ttf', 32)

text_x = 10
text_y = 10

# Game Over Font
over_font = pygame.font.Font('freesansbold.ttf', 64)

# Game Over Flags
game_over = False
game_over_played = False

# Function to display the score
def show_score(x, y):
    score = font.render(f"Score : {score_value}", True, WHITE)
    screen.blit(score, (x, y))

# Function to display Game Over text
def game_over_text():
    over_text = over_font.render("GAME OVER", True, WHITE)
    screen.blit(over_text, (200, 250))

# Function to display the player
def player(x, y):
    screen.blit(player_img, (x, y))

# Function to display the enemies
def enemy(x, y, i):
    screen.blit(enemy_img[i], (x, y))

# Function to fire bullets
def fire_bullet(x, y):
    global bullet_state
    bullet_state = "fire"
    screen.blit(bullet_img, (x + 16, y + 10))  # Adjust bullet position

# Function to detect collision
def is_collision(enemy_x, enemy_y, bullet_x, bullet_y):
    distance = math.sqrt((enemy_x - bullet_x) ** 2 + (enemy_y - bullet_y) ** 2)
    return distance < 27  # Adjust collision radius as needed

# Game Loop
running = True
clock = pygame.time.Clock()  # Control frame rate
while running:
    # Fill the screen with purple background color
    screen.fill(PURPLE)

    # Event Handling
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

        if not game_over:
            # If keystroke is pressed check whether it's right or left
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT or event.key == pygame.K_a:
                    player_x_change = -5
                if event.key == pygame.K_RIGHT or event.key == pygame.K_d:
                    player_x_change = 5
                if event.key == pygame.K_SPACE:
                    if bullet_state == "ready":
                        bullet_x = player_x
                        bullet_y = player_y
                        fire_bullet(bullet_x, bullet_y)
                        laser_sound.play()

            if event.type == pygame.KEYUP:
                if event.key == pygame.K_LEFT or event.key == pygame.K_a:
                    if player_x_change < 0:
                        player_x_change = 0
                if event.key == pygame.K_RIGHT or event.key == pygame.K_d:
                    if player_x_change > 0:
                        player_x_change = 0

    # Player Movement
    if not game_over:
        player_x += player_x_change

        # Boundary Checking for Player
        if player_x <= 0:
            player_x = 0
        elif player_x >= SCREEN_WIDTH - 64:  # Assuming player image width is 64
            player_x = SCREEN_WIDTH - 64

    # Enemy Movement
    for i in range(num_of_enemies):

        if not game_over:
            # Enemy Movement
            enemy_x[i] += enemy_x_change[i]
            if enemy_x[i] <= 0:
                enemy_x_change[i] = 4
                enemy_y[i] += enemy_y_change[i]
            elif enemy_x[i] >= SCREEN_WIDTH - 64:
                enemy_x_change[i] = -4
                enemy_y[i] += enemy_y_change[i]

            # Collision
            collision = is_collision(enemy_x[i], enemy_y[i], bullet_x, bullet_y)
            if collision:
                bullet_y = 480
                bullet_state = "ready"
                score_value += 1
                explosion_sound.play()  # Play explosion sound when enemy is hit
                enemy_x[i] = random.randint(0, 736)
                enemy_y[i] = random.randint(50, 150)

            # Game Over
            if enemy_y[i] > 440:
                game_over = True
                break

        # Display enemies
        enemy(enemy_x[i], enemy_y[i], i)

    if game_over:
        if not game_over_played:
            game_over_sound.play()
            game_over_played = True
        game_over_text()

    # Bullet Movement
    if not game_over:
        if bullet_y <= 0:
            bullet_y = 480
            bullet_state = "ready"

        if bullet_state == "fire":
            fire_bullet(bullet_x, bullet_y)
            bullet_y -= bullet_y_change

    # Display player
    player(player_x, player_y)
    show_score(text_x, text_y)

    # Update the screen
    pygame.display.update()

    # Limit to 60 FPS
    clock.tick(60)

# Quit pygame
pygame.quit()
